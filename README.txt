For an Advanced Algorithms project, we built an RSA algorithm and tested it with other classmates to verify the decrypting and encrypting process was working properly. To make it a little easier, however, I've just included my files: generate.java, encrypt.java, and decrypt.java, along with the other necessary text files.

The first step is to run the Generate file, as this generates our Public Key {E, N} along with our Private key, {D, N}, where N is the value of two large, prime numbers P and Q, E is an odd integer which is relatively to PhiN (or, (P-1)(Q-1)) (for this assignment, we chose E = 65537), and D is multaplicative inverse of E mod PhiN. Once the numbers have been generated, they are written to certain files we will need for the next steps: e.txt, n.txt, and d.txt, which hold each part of our Public and Private keys, along with message.txt which contains a String message to be encrypted.

Once generation is complete, we can move on to Encrypting. As standard, you'd want to encrypt files with your secret key, so whoever has your public key can decrypt them, however in this project we did experiment with it both ways. When running encrypt.java, it checks for the files it needs to encrypt: d.txt, n.txt, and message.txt. Once the files have been found, it reads each value and turns them into BigIntegers to complete the equation P(M) = M^D mod N, with M being our message. With that equation done, it transforms the cipher BigInteger value into a byte array and writes to the new file encryptedWithPrivate or encryptedWithPublic to be used in the decryption process.

With encryption complete, we can move on to Decrypting. Similarily to encrypt.java, decrypt.java will search for certain files depending on if you're decrypting with your private or public key, along with retrieving the cipher text from the encrytpion. It will convert each file into a BigInteger like before, and complete the equation S(C) = C^D mod N, with C being our cipher text. If everything goes right, it will save the BigInteger value into a byte array in a file decryptedWithPublic or decryptedWithPrivate, which should display the original message.
